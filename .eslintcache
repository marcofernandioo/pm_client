[{"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\index.js":"1","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\App.js":"2","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Input.js":"3","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Router.js":"4","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Pricelist.js":"5","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\api\\index.js":"6","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Navigations.js":"7","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Orderlist.js":"8","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\EditProduct.js":"9","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\AddProduct.js":"10","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Sales.js":"11","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\EditOrder.js":"12","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Loading.js":"13","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\pages\\yeet.js":"14","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\pages\\Yeet.js":"15","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\OrderlistCustomer.js":"16"},{"size":493,"mtime":1611596906956,"results":"17","hashOfConfig":"18"},{"size":367,"mtime":1611645766873,"results":"19","hashOfConfig":"18"},{"size":12584,"mtime":1613415338382,"results":"20","hashOfConfig":"18"},{"size":320,"mtime":1610990956266,"results":"21","hashOfConfig":"18"},{"size":5405,"mtime":1613343859348,"results":"22","hashOfConfig":"18"},{"size":4592,"mtime":1613413705973,"results":"23","hashOfConfig":"18"},{"size":6825,"mtime":1613448697162,"results":"24","hashOfConfig":"18"},{"size":15519,"mtime":1613448974953,"results":"25","hashOfConfig":"18"},{"size":6549,"mtime":1613343705389,"results":"26","hashOfConfig":"18"},{"size":6200,"mtime":1613248877807,"results":"27","hashOfConfig":"18"},{"size":147,"mtime":1611134643896,"results":"28","hashOfConfig":"18"},{"size":13700,"mtime":1613249203574,"results":"29","hashOfConfig":"18"},{"size":592,"mtime":1612336552100,"results":"30","hashOfConfig":"18"},{"size":126,"mtime":1613373124732,"results":"31","hashOfConfig":"18"},{"size":472,"mtime":1613374123778,"results":"32","hashOfConfig":"18"},{"size":12704,"mtime":1613448755770,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1oqul5q",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\index.js",[],["72","73"],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\App.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Input.js",["74"],"/* \r\n    Perhaps we check whether URL contains id or not?\r\n    If there is, we query that id, and display as an Edit Order Page,\r\n    if not, we dont query the id, and display it as Input Order Page.\r\n\r\n*/\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport 'date-fns';\r\n// import {format} from 'date-fns';\r\n// import moment from 'moment';\r\nimport MUIDataTable from 'mui-datatables';\r\nimport {makeStyles} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nimport _ from 'lodash';\r\n\r\nimport Loading from './Loading';\r\nimport {getPricelist, addOrder} from '../api';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    columnData: {\r\n        width: '600px'\r\n    }, \r\n    columnName: {\r\n        width: '200px'\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',   \r\n        width: '100%'\r\n    }, \r\n    grid: {\r\n        marginLeft: '20px'\r\n    }, \r\n    myCard: {\r\n        width: '100%',  \r\n    }, \r\n    myButton: {\r\n        backgroundColor: '#00cccc', \r\n        color: '#ffffff'\r\n    }, \r\n    textField: {\r\n        marginTop: '10px',   \r\n        marginBottom: '10px'\r\n    }, \r\n    root: {\r\n        flexDirection: 'column',   \r\n        justifyContent: 'flex-start', \r\n        alignItems: 'flex-start', \r\n        height: '100vh', \r\n        width: '900px', \r\n        marginLeft: '80px', \r\n        marginTop: '80px'\r\n    }, \r\n    alert: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}))\r\n\r\nexport default function Input () {\r\n    const classes = useStyles();\r\n    const [list, setList] = useState([]);\r\n    const [customer, setCustomer] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [contact, setContact] = useState('');\r\n    const [sendDate, setSendDate] = useState(new Date());\r\n    const [open, setOpen] = useState(false);\r\n    const [paid, setPaid] = useState(false);\r\n    const [ongkir, setOngkir] = useState(0)\r\n    const [loading, setLoading] = useState(false);\r\n\r\n\r\n    const columns = [\r\n        {\r\n            name: 'name',\r\n            label: 'Produk'\r\n        }, \r\n        {\r\n            name: 'qty',\r\n            label: 'Quantity',\r\n            options: {\r\n                customBodyRender: (value, meta) => {\r\n                    return (\r\n                        <TextField \r\n                            value = {value}\r\n                            variant = \"outlined\"\r\n                            type = \"number\"\r\n                            InputProps = {{inputProps: {min: 0}}}\r\n                            onChange = {(e) => onUpdateQty(meta.rowIndex, e.target.value)}\r\n                        />\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: 'strPrice',\r\n            label: 'Harga',\r\n        }, \r\n        {\r\n            name: 'desc', \r\n            label: 'Keterangan', \r\n            options: {\r\n                customBodyRender: (value, meta) => {\r\n                    return (\r\n                        <TextField \r\n                            value = {value}\r\n                            variant = \"outlined\"\r\n                            type = \"text\"\r\n                            onChange = {(e) => onUpdateDesc(meta.rowIndex, e.target.value)}\r\n                        />\r\n                    )\r\n                }\r\n            }\r\n        },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        getPricelist()\r\n        .then((res) => {\r\n            if (res.data.status === 'ok') {\r\n                for (let i = 0; i < res.data.list.length; i++) {\r\n                    console.log(res.data.list);\r\n                    let product = res.data.list[i];\r\n                    product.strPrice = formatCurrency(product.price);\r\n                    product.desc = \"\"\r\n                    \r\n                }\r\n                setList(res.data.list);\r\n            }\r\n            else alert(res.data.msg);\r\n        })\r\n        .catch(err => alert(err));\r\n    }, []);\r\n\r\n    const handleDateChange = (date) => {\r\n        setSendDate(date);\r\n    }\r\n\r\n    const onUpdateQty = (rowIndex, qty) => {\r\n        let updateProducts = [ ...list ];\r\n        let price = updateProducts[rowIndex].price;\r\n        updateProducts[rowIndex].qty = qty;\r\n        updateProducts[rowIndex].total = qty * price;\r\n        setList(updateProducts);\r\n        // console.log(updateProducts);\r\n    }\r\n\r\n    const onUpdateDesc = (rowIndex, text) => {\r\n        let updateProducts = [ ...list ];\r\n        updateProducts[rowIndex].desc = text;\r\n        setList(updateProducts);\r\n    }\r\n\r\n    const onSave = (customer, address, contact, paid, ongkir, sendDate) => {\r\n        setLoading(true);\r\n        const bracket =  _.filter(list, o => o.qty > 0);\r\n        console.log(bracket);\r\n        addOrder(customer, address, contact, bracket, paid, ongkir, sendDate, list)\r\n        .then((res) => {\r\n            if (res.data.status === 'ok') {\r\n                setLoading(false);\r\n                alert(res.data.msg);\r\n                window.location.href = '/'\r\n            }\r\n            else alert(res.data.msg); setLoading(false);\r\n        })\r\n        .catch(() => alert('Coba ulangi kembali'))\r\n    }\r\n\r\n    function Alert(props) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n    }\r\n\r\n    const handleClose = (reason) => {\r\n        setCustomer('');\r\n        setAddress('');\r\n        setContact('');\r\n        setOpen(false);\r\n        if (reason === 'clickaway'){\r\n            return;\r\n        }\r\n        window.location.href = '/'\r\n    }\r\n\r\n    const handleChecks = (e) => {\r\n        setPaid(e.target.checked);\r\n    }\r\n\r\n\r\n    const formatter = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'IDR'});\r\n    function formatCurrency(num) {\r\n        let res = formatter.format(num).split('IDR');\r\n        res = res.slice(1);\r\n        return `Rp.${res}`\r\n    }\r\n\r\n    return (\r\n        <> \r\n            <div className = {classes.alert}>\r\n                <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} color=\"success\">\r\n                        Orderan telah tercatat! \r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n                \r\n            <Card>\r\n                <CardContent>\r\n                    <Grid>\r\n                        <h2>Tambah Orderan</h2>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Nama Customer</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {customer}\r\n                                    onChange = {(e) => setCustomer(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Contact</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {contact}\r\n                                    onChange = {(e) => setContact(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Alamat</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {address}\r\n                                    onChange = {(e) => setAddress(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Ongkir</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"number\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {ongkir}\r\n                                    onChange = {(e) => setOngkir(e.target.value)}\r\n                                    InputProps = {{inputProps: {min: 0}}}\r\n                                ></TextField>\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Tanggal Pengiriman</div>\r\n                            <div className = {classes.columnData}> \r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        \r\n                                        value={sendDate}\r\n                                        onChange={(e) => handleDateChange(e)}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                            </MuiPickersUtilsProvider>\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Sudah dibayar</div>\r\n                            <div className = {classes.columnData}> \r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <Checkbox\r\n                                        checked={paid}\r\n                                        onChange={handleChecks}\r\n                                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                    />\r\n                            </MuiPickersUtilsProvider>\r\n                            </div>\r\n                        </div>\r\n                        <MUIDataTable \r\n                            title = \"List Produk\"\r\n                            data = {list}\r\n                            columns = {columns}\r\n                            \r\n                        />\r\n\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {() => onSave(customer, address, contact,paid, ongkir, sendDate)}\r\n                            color = \"secondary\"\r\n                            style = {{marginTop: \"20px\"}}\r\n                        >\r\n                            Tambah\r\n                        </Button>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n            <Loading open = {loading} />\r\n        </>\r\n    )\r\n}","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Router.js",[],["75","76"],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Pricelist.js",["77"],"import React, {useState, useEffect} from 'react';\r\nimport MUIDataTable from 'mui-datatables';\r\nimport Button from '@material-ui/core/Button'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport Loading from './Loading';\r\nimport {getPricelist, deleteProduct} from '../api';\r\n\r\nexport default function Pricelist () {\r\n    const [products, setProducts] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [id, setId] = useState({});\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const columns = [\r\n        {\r\n\r\n            name: 'name', \r\n            label: 'Produk', \r\n            options: {}\r\n        }, \r\n        {\r\n            name: 'strPrice', \r\n            label: 'Harga Jual', \r\n            options: {}\r\n        },\r\n        {\r\n            name: 'strCost', \r\n            label: 'Modal',\r\n            options: {}\r\n        },\r\n        {\r\n            name: '_id', \r\n            label: ' ', \r\n            options: {\r\n                filter: false, \r\n                sort: false, \r\n                customBodyRender: (id) => {\r\n                    return (\r\n                        <div>\r\n                            <Tooltip title = \"Ubah Produk\">\r\n                                <IconButton>\r\n                                    <EditIcon onClick = {() => redirectToEditProduct(id)}/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title = \"Hapus Produk\">\r\n                                <IconButton>\r\n                                    <DeleteIcon onClick = {() => handleClickOpen(id)}/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    ]\r\n\r\n    const options = {\r\n        filterType: 'checkbox', \r\n        responsive: 'standard'\r\n    }\r\n\r\n    const formatter = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'IDR'});\r\n    function formatCurrency(num) {\r\n        let res = formatter.format(num).split('IDR');\r\n        res = res.slice(1);\r\n        return `Rp.${res}`\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setLoading(true);\r\n        loadPricelist();\r\n    }, []);\r\n\r\n    const loadPricelist = () => {\r\n        getPricelist()\r\n        .then(res => {\r\n            if (res.data.status === 'ok') {\r\n                for (let i = 0; i < res.data.list.length; i++) {\r\n                    let product = res.data.list[i];\r\n                    product.strPrice = formatCurrency(product.price);\r\n                    product.strCost = formatCurrency(product.cost);\r\n                }\r\n                setProducts(res.data.list);\r\n                setLoading(false);\r\n            }\r\n            else alert(res.data.msg); setLoading(false);\r\n        })\r\n        .catch(() => alert('Coba ulangi kembali'));\r\n    }\r\n\r\n    const redirectToEditProduct = (id) => {\r\n        window.location.href = '/#/product/edit/'+id\r\n    }\r\n\r\n    const onDeleteProduct = (id) => {\r\n        deleteProduct(id)\r\n        .then((res) => {\r\n            if (res.data.status === 'ok') {\r\n                setOpen(false);\r\n                loadPricelist();\r\n            }\r\n            else alert(res.data.msg);\r\n        })\r\n        .catch(err => alert(err));\r\n    }\r\n\r\n    const handleClickOpen = (id) => {\r\n        setId(id);\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button \r\n                style = {{marginBottom: '10px'}}\r\n                variant = \"contained\" \r\n                color = \"primary\"\r\n                onClick = {() => window.location.href = '/#/add'}\r\n            >\r\n                Tambahkan produk\r\n            </Button>\r\n            <MUIDataTable \r\n                title = \"Pricelist\"\r\n                data = {products}\r\n                columns = {columns}\r\n                options = {options}\r\n            />\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Hapus Produk Ini?\"}</DialogTitle>\r\n                <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    Produk yang dihapus tidak dapat dibalikkan kembali.\r\n                </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Kembali\r\n                </Button>\r\n                <Button onClick={() => onDeleteProduct(id)} color=\"primary\" autoFocus>\r\n                    Hapus\r\n                </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Loading open = {loading}/>\r\n        </>\r\n    )\r\n}           ","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\api\\index.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Navigations.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Orderlist.js",["78","79","80","81","82"],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\EditProduct.js",["83"],"import React, {useEffect, useState} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport {makeStyles} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nimport Loading from './Loading';\r\nimport {getProduct, editProduct} from '../api';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    columnData: {\r\n        width: '600px'\r\n    }, \r\n    columnName: {\r\n        width: '200px'\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',   \r\n        width: '100%'\r\n    }, \r\n    grid: {\r\n        marginLeft: '20px'\r\n    }, \r\n    myCard: {\r\n        width: '100%',  \r\n    }, \r\n    myButton: {\r\n        backgroundColor: '#00cccc', \r\n        color: '#ffffff'\r\n    }, \r\n    textField: {\r\n        marginTop: '10px',   \r\n        marginBottom: '10px'\r\n    }, \r\n    root: {\r\n        flexDirection: 'column',   \r\n        justifyContent: 'flex-start', \r\n        alignItems: 'flex-start', \r\n        height: '100vh', \r\n        width: '900px', \r\n        marginLeft: '80px', \r\n        marginTop: '80px'\r\n    }\r\n}))\r\n\r\nexport default function EditProduct () {\r\n    const [name, setName] = useState('');\r\n    const [category, setCategory] = useState('');\r\n    const [price, setPrice] = useState(0);\r\n    const [cost, setCost] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    let {id} = useParams();\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        getProduct(id)\r\n        .then((res) => {\r\n            if (res.data.status === 'ok') {\r\n                setName(res.data.product.name);\r\n                setCategory(res.data.product.category);\r\n                setPrice(res.data.product.price);\r\n                setCost(res.data.product.cost);\r\n                setLoading(false);\r\n            }\r\n            else alert(res.data.msg); setLoading(false);\r\n            \r\n        })\r\n        .catch((err) => alert(err));\r\n    }, []);\r\n\r\n    const submitEditProduct = () => {\r\n        setLoading(true);\r\n        editProduct(id,name,category,price,cost)\r\n        .then((res) => {\r\n            if (res.data.status === 'ok') {\r\n                setLoading(false);\r\n                window.location.href = '/#/pricelist';\r\n                alert(res.data.msg);\r\n            } else {\r\n                alert(res.data.msg);\r\n                setLoading(false);\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid>\r\n                        <h2>UBAH PRODUK</h2>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Nama Buah</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {name}\r\n                                    onChange = {(e) => setName(e.target.value)}\r\n                                    \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        {/* <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Jenis Buah</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    onChange = {(e) => setCategory(e.target.value)}\r\n                                    value = {category}\r\n                                />\r\n                            </div>\r\n                        </div> */}\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Harga Jual</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"number\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    onChange = {(e) => setPrice(e.target.value)}\r\n                                    value = {price}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Modal</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"number\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    onChange = {(e) => setCost(e.target.value)}\r\n                                    value = {cost}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {() => window.location.href = '/#/pricelist'}\r\n                            style = {{marginRight: '20px'}}\r\n                        >\r\n                            kembali\r\n                        </Button>\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {submitEditProduct}\r\n                            color = \"secondary\"\r\n                        >\r\n                            ubah\r\n                        </Button>\r\n\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n            <Loading open = {loading} />\r\n        </>\r\n    )\r\n}","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\AddProduct.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Sales.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\EditOrder.js",["84","85","86","87","88","89","90","91","92","93"],"\r\nimport React, {useState, useEffect} from 'react';\r\nimport 'date-fns';\r\nimport {format} from 'date-fns';\r\nimport moment from 'moment';\r\nimport MUIDataTable from 'mui-datatables';\r\nimport {makeStyles} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport {useParams} from 'react-router-dom';\r\n\r\nimport _ from 'lodash';\r\n\r\nimport Loading from './Loading';\r\nimport {getPricelist, findOrder, updateOrder} from '../api';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    columnData: {\r\n        width: '600px'\r\n    }, \r\n    columnName: {\r\n        width: '200px'\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',   \r\n        width: '100%'\r\n    }, \r\n    grid: {\r\n        marginLeft: '20px'\r\n    }, \r\n    myCard: {\r\n        width: '100%',  \r\n    }, \r\n    myButton: {\r\n        backgroundColor: '#00cccc', \r\n        color: '#ffffff'\r\n    }, \r\n    textField: {\r\n        marginTop: '10px',   \r\n        marginBottom: '10px'\r\n    }, \r\n    root: {\r\n        flexDirection: 'column',   \r\n        justifyContent: 'flex-start', \r\n        alignItems: 'flex-start', \r\n        height: '100vh', \r\n        width: '900px', \r\n        marginLeft: '80px', \r\n        marginTop: '80px'\r\n    }, \r\n    alert: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}))\r\n\r\nexport default function EditOrder () {\r\n    const classes = useStyles();\r\n    const [list, setList] = useState([]);\r\n    const [customer, setCustomer] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [contact, setContact] = useState('');\r\n    const [sendDate, setSendDate] = useState(new Date());\r\n    const [open, setOpen] = useState(false);\r\n    const [paid, setPaid] = useState(false);\r\n    const [ongkir, setOngkir] = useState(0)\r\n    const [subtotal, setSubtotal] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    let {id} = useParams();\r\n\r\n\r\n    const columns = [\r\n        {\r\n            name: 'name',\r\n            label: 'Produk'\r\n        }, \r\n        {\r\n            name: 'qty',\r\n            label: 'Quantity',\r\n            options: {\r\n                customBodyRender: (value, meta) => {\r\n                    return (\r\n                        <TextField \r\n                            value = {value}\r\n                            defaultValue = {3}\r\n                            variant = \"outlined\"\r\n                            type = \"number\"\r\n                            InputProps = {{inputProps: {min: 0}}}\r\n                            onChange = {(e) => onUpdateQty(meta.rowIndex, e.target.value)}\r\n                        />\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: 'strPrice',\r\n            label: 'Harga',\r\n        }, \r\n        {\r\n            name: 'desc', \r\n            label: 'Keterangan', \r\n            options: {\r\n                customBodyRender: (value, meta) => {\r\n                    return (\r\n                        <TextField \r\n                            value = {value}\r\n                            variant = \"outlined\"\r\n                            type = \"text\"\r\n                            onChange = {(e) => onUpdateDesc(meta.rowIndex, e.target.value)}\r\n                            // onChange = {e => test(meta)}\r\n                        />\r\n                    )\r\n                }\r\n            }\r\n        },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        // getPricelist()\r\n        // .then((res) => {\r\n        //     if (res.data.status == 'ok') {\r\n        //         for (let i = 0; i < res.data.list.length; i++) {\r\n        //             let product = res.data.list[i];\r\n        //             product.strPrice = formatCurrency(product.price);\r\n        //             product.desc = \"\"\r\n        //         }\r\n        //         setList(res.data.list);\r\n        //     }\r\n        //     else alert(res.data.msg)\r\n        // })\r\n        // .catch(err => console.log(err));\r\n        // console.log(total);\r\n        setLoading(true);\r\n        findOrder(id)\r\n        .then((res) => {\r\n            if (res.data.status == 'ok') {\r\n                // console.log(res.data);\r\n                let data = res.data.msg;\r\n                setCustomer(data.buyer);\r\n                setAddress(data.address);\r\n                setContact(data.contact);\r\n                setSendDate(data.sendDate);\r\n                setOngkir(data.ongkir);\r\n                setPaid(data.paid);\r\n                for (let i = 0; i < res.data.msg.fakelist.length; i++) {\r\n                    let product = res.data.msg.fakelist[i];\r\n                    product.strPrice = formatCurrency(product.price);\r\n                    // product.desc = \"\"\r\n                }\r\n                setList(data.fakelist);\r\n                setSubtotal(data.subtotal);\r\n                setLoading(false);\r\n            } else alert(res.data.msg); setLoading(false);\r\n        })\r\n    }, []);\r\n\r\n    const handleDateChange = (date) => {\r\n        setSendDate(date);\r\n    }\r\n\r\n    const onUpdateQty = (rowIndex, qty) => {\r\n        let updateProducts = [ ...list ];\r\n        let price = updateProducts[rowIndex].price;\r\n        updateProducts[rowIndex].qty = qty;\r\n        updateProducts[rowIndex].total = qty * price;\r\n        setList(updateProducts);\r\n    }\r\n\r\n    const onUpdateDesc = (rowIndex, text) => {\r\n        let updateProducts = [ ...list ];\r\n        updateProducts[rowIndex].desc = text;\r\n        setList(updateProducts);\r\n    }\r\n\r\n    const test = (meta) => {\r\n        console.log(meta);\r\n    }\r\n\r\n    const onSave = (customer, address, contact, paid, ongkir, sendDate, subtotal) => {\r\n        setLoading(true);\r\n        updateOrder(id, customer, address, contact, paid, ongkir, sendDate, subtotal)\r\n        .then((res) => {\r\n            if (res.data.status == 'ok') window.location.href = '/'\r\n            setLoading(false);\r\n            alert(res.data.msg);\r\n        })\r\n        .catch((err) => alert(err));\r\n    }\r\n\r\n    function Alert(props) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n    }\r\n\r\n    const handleClose = (reason) => {\r\n        setCustomer('');\r\n        setAddress('');\r\n        setContact('');\r\n        setOpen(false);\r\n        if (reason === 'clickaway'){\r\n            return;\r\n        }\r\n        window.location.href = '/'\r\n    }\r\n\r\n    const handleChecks = (e) => {\r\n        setPaid(e.target.checked);\r\n    }\r\n\r\n\r\n    const formatter = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'IDR'});\r\n    function formatCurrency(num) {\r\n        let res = formatter.format(num).split('IDR');\r\n        res = res.slice(1);\r\n        return `Rp.${res}`\r\n    }\r\n\r\n    return (\r\n        <> \r\n            <div className = {classes.alert}>\r\n                <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} color=\"success\">\r\n                        Orderan telah tercatat! \r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n                \r\n            <Card>\r\n                <CardContent>\r\n                    <Grid>\r\n                        <h2>Ubah Orderan</h2>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Nama Customer</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {customer}\r\n                                    onChange = {(e) => setCustomer(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Contact</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {contact}\r\n                                    onChange = {(e) => setContact(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Alamat</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {address}\r\n                                    onChange = {(e) => setAddress(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Ongkir</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"number\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {ongkir}\r\n                                    onChange = {(e) => setOngkir(e.target.value)}\r\n                                    InputProps = {{inputProps: {min: 0}}}\r\n                                ></TextField>\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Tanggal Pengiriman</div>\r\n                            <div className = {classes.columnData}> \r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        \r\n                                        value={sendDate}\r\n                                        onChange={(e) => handleDateChange(e)}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                            </MuiPickersUtilsProvider>\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Sudah dibayar</div>\r\n                            <div className = {classes.columnData}> \r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <Checkbox\r\n                                        checked={paid}\r\n                                        onChange={handleChecks}\r\n                                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                    />\r\n                            </MuiPickersUtilsProvider>\r\n                            </div>\r\n                        </div>\r\n                        {/* <MUIDataTable \r\n                            title = \"List Produk\"\r\n                            data = {list}\r\n                            columns = {columns}\r\n                        /> */}\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {() => window.location.href = '/#/'}\r\n                            style = {{marginTop: '20px', marginRight: '20px'}}\r\n                        >\r\n                            kembali\r\n                        </Button>\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {() => onSave(customer, address, contact,paid, ongkir, sendDate, subtotal)}\r\n                            color = \"secondary\"\r\n                            style = {{marginTop: \"20px\"}}\r\n                        >\r\n                            Ubah\r\n                        </Button>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n            <Loading open = {loading} />\r\n        </>\r\n    )\r\n}","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Loading.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\pages\\yeet.js",["94","95","96"],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\pages\\Yeet.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\OrderlistCustomer.js",["97","98","99","100","101"],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":152,"column":8,"nodeType":"108","endLine":152,"endColumn":10,"suggestions":"109"},{"ruleId":"102","replacedBy":"110"},{"ruleId":"104","replacedBy":"111"},{"ruleId":"106","severity":1,"message":"112","line":81,"column":8,"nodeType":"108","endLine":81,"endColumn":10,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":34,"column":8,"nodeType":"116","messageId":"117","endLine":34,"endColumn":14},{"ruleId":"114","severity":1,"message":"118","line":37,"column":37,"nodeType":"116","messageId":"117","endLine":37,"endColumn":40},{"ruleId":"114","severity":1,"message":"119","line":39,"column":7,"nodeType":"116","messageId":"117","endLine":39,"endColumn":14},{"ruleId":"114","severity":1,"message":"120","line":245,"column":19,"nodeType":"116","messageId":"117","endLine":245,"endColumn":27},{"ruleId":"106","severity":1,"message":"121","line":273,"column":8,"nodeType":"108","endLine":273,"endColumn":15,"suggestions":"122"},{"ruleId":"106","severity":1,"message":"123","line":77,"column":8,"nodeType":"108","endLine":77,"endColumn":10,"suggestions":"124"},{"ruleId":"114","severity":1,"message":"125","line":4,"column":9,"nodeType":"116","messageId":"117","endLine":4,"endColumn":15},{"ruleId":"114","severity":1,"message":"126","line":5,"column":8,"nodeType":"116","messageId":"117","endLine":5,"endColumn":14},{"ruleId":"114","severity":1,"message":"127","line":6,"column":8,"nodeType":"116","messageId":"117","endLine":6,"endColumn":20},{"ruleId":"114","severity":1,"message":"128","line":24,"column":8,"nodeType":"116","messageId":"117","endLine":24,"endColumn":9},{"ruleId":"114","severity":1,"message":"129","line":27,"column":9,"nodeType":"116","messageId":"117","endLine":27,"endColumn":21},{"ruleId":"114","severity":1,"message":"130","line":90,"column":11,"nodeType":"116","messageId":"117","endLine":90,"endColumn":18},{"ruleId":"131","severity":1,"message":"132","line":154,"column":33,"nodeType":"133","messageId":"134","endLine":154,"endColumn":35},{"ruleId":"106","severity":1,"message":"135","line":173,"column":8,"nodeType":"108","endLine":173,"endColumn":10,"suggestions":"136"},{"ruleId":"114","severity":1,"message":"137","line":193,"column":11,"nodeType":"116","messageId":"117","endLine":193,"endColumn":15},{"ruleId":"131","severity":1,"message":"132","line":201,"column":33,"nodeType":"133","messageId":"134","endLine":201,"endColumn":35},{"ruleId":"114","severity":1,"message":"138","line":7,"column":13,"nodeType":"116","messageId":"117","endLine":7,"endColumn":17},{"ruleId":"114","severity":1,"message":"139","line":7,"column":19,"nodeType":"116","messageId":"117","endLine":7,"endColumn":24},{"ruleId":"140","severity":2,"message":"141","line":7,"column":29,"nodeType":"116","endLine":7,"endColumn":35},{"ruleId":"114","severity":1,"message":"115","line":34,"column":8,"nodeType":"116","messageId":"117","endLine":34,"endColumn":14},{"ruleId":"114","severity":1,"message":"118","line":37,"column":37,"nodeType":"116","messageId":"117","endLine":37,"endColumn":40},{"ruleId":"114","severity":1,"message":"142","line":37,"column":42,"nodeType":"116","messageId":"117","endLine":37,"endColumn":54},{"ruleId":"114","severity":1,"message":"143","line":37,"column":56,"nodeType":"116","messageId":"117","endLine":37,"endColumn":66},{"ruleId":"114","severity":1,"message":"119","line":39,"column":7,"nodeType":"116","messageId":"117","endLine":39,"endColumn":14},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formatCurrency'. Either include it or remove the dependency array.","ArrayExpression",["146"],["144"],["145"],"React Hook useEffect has a missing dependency: 'loadPricelist'. Either include it or remove the dependency array.",["147"],"no-unused-vars","'useSWR' is defined but never used.","Identifier","unusedVar","'all' is defined but never used.","'fetcher' is assigned a value but never used.","'setQuery' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'endDate' and 'startDate'. Either include them or remove the dependency array.",["148"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["149"],"'format' is defined but never used.","'moment' is defined but never used.","'MUIDataTable' is defined but never used.","'_' is defined but never used.","'getPricelist' is defined but never used.","'columns' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'formatCurrency' and 'id'. Either include them or remove the dependency array.",["150"],"'test' is assigned a value but never used.","'data' is assigned a value but never used.","'error' is assigned a value but never used.","react-hooks/rules-of-hooks","React Hook \"useSWR\" is called in function \"yeet\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","'getDateRange' is defined but never used.","'rangeSales' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [formatCurrency]",{"range":"161","text":"162"},"Update the dependencies array to be: [loadPricelist]",{"range":"163","text":"164"},"Update the dependencies array to be: [endDate, query, startDate]",{"range":"165","text":"166"},"Update the dependencies array to be: [id]",{"range":"167","text":"168"},"Update the dependencies array to be: [formatCurrency, id]",{"range":"169","text":"170"},[4532,4534],"[formatCurrency]",[2700,2702],"[loadPricelist]",[9963,9970],"[endDate, query, startDate]",[2203,2205],"[id]",[5493,5495],"[formatCurrency, id]"]