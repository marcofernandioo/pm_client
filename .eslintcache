[{"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\index.js":"1","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\App.js":"2","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Input.js":"3","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Router.js":"4","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Pricelist.js":"5","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\api\\index.js":"6","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Navigations.js":"7","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Orderlist.js":"8","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\EditProduct.js":"9","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\AddProduct.js":"10","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Sales.js":"11","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\EditOrder.js":"12"},{"size":493,"mtime":1611596906956,"results":"13","hashOfConfig":"14"},{"size":367,"mtime":1611593759466,"results":"15","hashOfConfig":"14"},{"size":12327,"mtime":1611584550534,"results":"16","hashOfConfig":"14"},{"size":320,"mtime":1610990956266,"results":"17","hashOfConfig":"14"},{"size":5005,"mtime":1611585164158,"results":"18","hashOfConfig":"14"},{"size":3721,"mtime":1611586985674,"results":"19","hashOfConfig":"14"},{"size":6288,"mtime":1611597017416,"results":"20","hashOfConfig":"14"},{"size":12376,"mtime":1611584728582,"results":"21","hashOfConfig":"14"},{"size":5383,"mtime":1611227710773,"results":"22","hashOfConfig":"14"},{"size":5111,"mtime":1611597115197,"results":"23","hashOfConfig":"14"},{"size":147,"mtime":1611134643896,"results":"24","hashOfConfig":"14"},{"size":14201,"mtime":1611584807550,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1oqul5q",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\index.js",[],["57","58"],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\App.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Input.js",["59","60","61","62","63"],"/* \r\n    Perhaps we check whether URL contains id or not?\r\n    If there is, we query that id, and display as an Edit Order Page,\r\n    if not, we dont query the id, and display it as Input Order Page.\r\n\r\n*/\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport 'date-fns';\r\nimport {format} from 'date-fns';\r\nimport moment from 'moment';\r\nimport MUIDataTable from 'mui-datatables';\r\nimport {makeStyles} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nimport _ from 'lodash';\r\n\r\nimport {getPricelist, addOrder} from '../api';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    columnData: {\r\n        width: '600px'\r\n    }, \r\n    columnName: {\r\n        width: '200px'\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',   \r\n        width: '100%'\r\n    }, \r\n    grid: {\r\n        marginLeft: '20px'\r\n    }, \r\n    myCard: {\r\n        width: '100%',  \r\n    }, \r\n    myButton: {\r\n        backgroundColor: '#00cccc', \r\n        color: '#ffffff'\r\n    }, \r\n    textField: {\r\n        marginTop: '10px',   \r\n        marginBottom: '10px'\r\n    }, \r\n    root: {\r\n        flexDirection: 'column',   \r\n        justifyContent: 'flex-start', \r\n        alignItems: 'flex-start', \r\n        height: '100vh', \r\n        width: '900px', \r\n        marginLeft: '80px', \r\n        marginTop: '80px'\r\n    }, \r\n    alert: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}))\r\n\r\nexport default function Input () {\r\n    const classes = useStyles();\r\n    const [list, setList] = useState([]);\r\n    const [customer, setCustomer] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [contact, setContact] = useState('');\r\n    const [sendDate, setSendDate] = useState(new Date());\r\n    const [open, setOpen] = useState(false);\r\n    const [paid, setPaid] = useState(false);\r\n    const [ongkir, setOngkir] = useState(0)\r\n\r\n\r\n    const columns = [\r\n        {\r\n            name: 'name',\r\n            label: 'Produk'\r\n        }, \r\n        {\r\n            name: 'qty',\r\n            label: 'Quantity',\r\n            options: {\r\n                customBodyRender: (value, meta) => {\r\n                    return (\r\n                        <TextField \r\n                            value = {value}\r\n                            variant = \"outlined\"\r\n                            type = \"number\"\r\n                            InputProps = {{inputProps: {min: 0}}}\r\n                            onChange = {(e) => onUpdateQty(meta.rowIndex, e.target.value)}\r\n                        />\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: 'strPrice',\r\n            label: 'Harga',\r\n        }, \r\n        {\r\n            name: 'desc', \r\n            label: 'Keterangan', \r\n            options: {\r\n                customBodyRender: (value, meta) => {\r\n                    return (\r\n                        <TextField \r\n                            value = {value}\r\n                            variant = \"outlined\"\r\n                            type = \"text\"\r\n                            onChange = {(e) => onUpdateDesc(meta.rowIndex, e.target.value)}\r\n                        />\r\n                    )\r\n                }\r\n            }\r\n        },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        getPricelist()\r\n        .then((res) => {\r\n            if (res.data.status == 'ok') {\r\n                for (let i = 0; i < res.data.list.length; i++) {\r\n                    console.log(res.data.list);\r\n                    let product = res.data.list[i];\r\n                    product.strPrice = formatCurrency(product.price);\r\n                    product.desc = \"\"\r\n                }\r\n                setList(res.data.list);\r\n            }\r\n            else console.log(res.data.msg)\r\n        })\r\n        .catch(err => console.log(err));\r\n    }, []);\r\n\r\n    const handleDateChange = (date) => {\r\n        setSendDate(date);\r\n    }\r\n\r\n    const onUpdateQty = (rowIndex, qty) => {\r\n        let updateProducts = [ ...list ];\r\n        let price = updateProducts[rowIndex].price;\r\n        updateProducts[rowIndex].qty = qty;\r\n        updateProducts[rowIndex].total = qty * price;\r\n        setList(updateProducts);\r\n        console.log(updateProducts);\r\n    }\r\n\r\n    const onUpdateDesc = (rowIndex, text) => {\r\n        let updateProducts = [ ...list ];\r\n        updateProducts[rowIndex].desc = text;\r\n        setList(updateProducts);\r\n    }\r\n\r\n    const onSave = (customer, address, contact, paid, ongkir, sendDate) => {\r\n        const bracket =  _.filter(list, o => o.qty > 0);\r\n        addOrder(customer, address, contact, bracket, paid, ongkir, sendDate, list)\r\n        .then((res) => {\r\n            if (res.data.status == 'ok') {\r\n                alert(res.data.msg);\r\n                window.location.href = '/'\r\n            }\r\n            else console.log(res.data.msg);\r\n        })\r\n        .catch(() => alert('Coba ulangi kembali'))\r\n    }\r\n\r\n    function Alert(props) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n    }\r\n\r\n    const handleClose = (reason) => {\r\n        setCustomer('');\r\n        setAddress('');\r\n        setContact('');\r\n        setOpen(false);\r\n        if (reason === 'clickaway'){\r\n            return;\r\n        }\r\n        window.location.href = '/'\r\n    }\r\n\r\n    const handleChecks = (e) => {\r\n        setPaid(e.target.checked);\r\n    }\r\n\r\n\r\n    const formatter = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'IDR'});\r\n    function formatCurrency(num) {\r\n        let res = formatter.format(num).split('IDR');\r\n        res = res.slice(1);\r\n        return `Rp.${res}`\r\n    }\r\n\r\n    return (\r\n        <> \r\n            <div className = {classes.alert}>\r\n                <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} color=\"success\">\r\n                        Orderan telah tercatat! \r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n                \r\n            <Card>\r\n                <CardContent>\r\n                    <Grid>\r\n                        <h2>Tambah Orderan</h2>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Nama Customer</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {customer}\r\n                                    onChange = {(e) => setCustomer(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Contact</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {contact}\r\n                                    onChange = {(e) => setContact(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Alamat</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {address}\r\n                                    onChange = {(e) => setAddress(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Ongkir</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"number\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {ongkir}\r\n                                    onChange = {(e) => setOngkir(e.target.value)}\r\n                                    InputProps = {{inputProps: {min: 0}}}\r\n                                ></TextField>\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Tanggal Pengiriman</div>\r\n                            <div className = {classes.columnData}> \r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        \r\n                                        value={sendDate}\r\n                                        onChange={(e) => handleDateChange(e)}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                            </MuiPickersUtilsProvider>\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Sudah dibayar</div>\r\n                            <div className = {classes.columnData}> \r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <Checkbox\r\n                                        checked={paid}\r\n                                        onChange={handleChecks}\r\n                                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                    />\r\n                            </MuiPickersUtilsProvider>\r\n                            </div>\r\n                        </div>\r\n                        <MUIDataTable \r\n                            title = \"List Produk\"\r\n                            data = {list}\r\n                            columns = {columns}\r\n                            \r\n                        />\r\n\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {() => onSave(customer, address, contact,paid, ongkir, sendDate)}\r\n                            color = \"secondary\"\r\n                            style = {{marginTop: \"20px\"}}\r\n                        >\r\n                            Tambah\r\n                        </Button>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    )\r\n}","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Router.js",[],["64","65"],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Pricelist.js",["66","67","68","69"],"import React, {useState, useEffect} from 'react';\r\nimport MUIDataTable from 'mui-datatables';\r\nimport Button from '@material-ui/core/Button'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport {getPricelist, deleteProduct, editProduct} from '../api';\r\n\r\nexport default function Pricelist () {\r\n    const [products, setProducts] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [id, setId] = useState({});\r\n\r\n    const columns = [\r\n        {\r\n\r\n            name: 'name', \r\n            label: 'Produk', \r\n            options: {}\r\n        }, \r\n        {\r\n            name: 'strPrice', \r\n            label: 'Harga Jual', \r\n            options: {}\r\n        }, \r\n        {\r\n            name: '_id', \r\n            label: ' ', \r\n            options: {\r\n                filter: false, \r\n                sort: false, \r\n                customBodyRender: (id) => {\r\n                    return (\r\n                        <div>\r\n                            <Tooltip title = \"Ubah Produk\">\r\n                                <IconButton>\r\n                                    <EditIcon onClick = {() => redirectToEditProduct(id)}/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title = \"Hapus Produk\">\r\n                                <IconButton>\r\n                                    <DeleteIcon onClick = {() => handleClickOpen(id)}/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    ]\r\n\r\n    const options = {\r\n        filterType: 'checkbox'\r\n    }\r\n\r\n    const formatter = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'IDR'});\r\n    function formatCurrency(num) {\r\n        let res = formatter.format(num).split('IDR');\r\n        res = res.slice(1);\r\n        return `Rp.${res}`\r\n    }\r\n    \r\n    useEffect(() => {\r\n        loadPricelist();\r\n    }, []);\r\n\r\n    const loadPricelist = () => {\r\n        getPricelist()\r\n        .then(res => {\r\n            if (res.data.status == 'ok') {\r\n                for (let i = 0; i < res.data.list.length; i++) {\r\n                    let product = res.data.list[i];\r\n                    product.strPrice = formatCurrency(product.price);\r\n                }\r\n                setProducts(res.data.list);\r\n            }\r\n            else alert(res.data.msg);\r\n        })\r\n        .catch(() => console.log('Coba ulangi kembali'));\r\n    }\r\n\r\n    const redirectToEditProduct = (id) => {\r\n        window.location.href = '/product/edit/'+id\r\n    }\r\n\r\n    const onDeleteProduct = (id) => {\r\n        deleteProduct(id)\r\n        .then((res) => {\r\n            if (res.data.status == 'ok') {\r\n                setOpen(false);\r\n                loadPricelist();\r\n            }\r\n            else alert(res.data.msg);\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    const handleClickOpen = (id) => {\r\n        setId(id);\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button \r\n                style = {{marginBottom: '10px'}}\r\n                variant = \"contained\" \r\n                color = \"primary\"\r\n                onClick = {() => window.location.href = '/add'}\r\n            >\r\n                Tambahkan produk\r\n            </Button>\r\n            <MUIDataTable \r\n                title = \"Pricelist\"\r\n                data = {products}\r\n                columns = {columns}\r\n                options = {options}\r\n            />\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Hapus Produk Ini?\"}</DialogTitle>\r\n                <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    Produk yang dihapus tidak dapat dibalikkan kembali.\r\n                </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Kembali\r\n                </Button>\r\n                <Button onClick={() => onDeleteProduct(id)} color=\"primary\" autoFocus>\r\n                    Hapus\r\n                </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}           ","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\api\\index.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Navigations.js",["70","71","72"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\n\r\nimport {Switch, Route} from 'react-router-dom';\r\n\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\n\r\n\r\nimport Input from './Input';\r\nimport Pricelist from './Pricelist';\r\nimport Sales from './Sales';\r\nimport Orderlist from './Orderlist';\r\nimport EditProduct from './EditProduct';\r\nimport AddProduct from './AddProduct';\r\nimport EditOrder from './EditOrder';\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function MiniDrawer() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: open,\r\n            })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Pasar Medan\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          <ListItem button onClick = {() => window.location.href = '/order'} >\r\n              <ListItemIcon><AddIcon/></ListItemIcon>\r\n              <ListItemText primary = {\"Add Order\"} />\r\n          </ListItem>\r\n          <ListItem button onClick = {() => window.location.href = '/'} >\r\n              <ListItemIcon><FormatListBulletedIcon/></ListItemIcon>\r\n              <ListItemText primary = {\"Orderlist\"} />\r\n          </ListItem>\r\n          <ListItem button onClick = {() => window.location.href = '/pricelist'} >\r\n              <ListItemIcon><MenuBookIcon/></ListItemIcon>\r\n              <ListItemText primary = {\"Pricelist\"} />\r\n          </ListItem>\r\n          {/* <ListItem button onClick = {() => window.location.href = '/sales'} >\r\n              <ListItemIcon><EqualizerIcon/></ListItemIcon>\r\n              <ListItemText primary = {\"Sales\"} />\r\n          </ListItem> */}\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <Switch>\r\n            \r\n            <Route path = '/pricelist' component = {Pricelist} />\r\n            <Route path = '/order' component = {Input} />\r\n            <Route path = '/sales' component = {Sales} />\r\n            <Route path = '/product/edit/:id' component = {EditProduct} />\r\n            <Route path = '/edit/:id' component = {EditOrder} />\r\n            <Route path = '/add' component = {AddProduct} />\r\n            <Route exact path = '/' component = {Orderlist} />\r\n        </Switch>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Orderlist.js",["73","74","75","76"],"import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nimport moment from 'moment';\r\n\r\nimport {getDateOrders, deleteOrder} from '../api';\r\n\r\n\r\nconst useRowStyles = makeStyles({\r\n    root: {\r\n      '& > *': {\r\n        borderBottom: 'unset',\r\n      },\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  columnData: {\r\n      width: '600px'\r\n  }, \r\n  columnName: {\r\n      width: '200px'\r\n  },\r\n  rowContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'flex-start',\r\n      alignItems: 'center',   \r\n      width: '100%'\r\n  }, \r\n  grid: {\r\n      marginLeft: '20px'\r\n  }, \r\n  myCard: {\r\n      width: '100%',  \r\n  }, \r\n  myButton: {\r\n      backgroundColor: '#00cccc', \r\n      color: '#ffffff'\r\n  }, \r\n  textField: {\r\n      marginTop: '10px',   \r\n      marginBottom: '10px'\r\n  }, \r\n  root: {\r\n      flexDirection: 'column',   \r\n      justifyContent: 'flex-start', \r\n      alignItems: 'flex-start', \r\n      height: '100vh', \r\n      width: '900px', \r\n      marginLeft: '80px', \r\n      marginTop: '80px'\r\n  }, \r\n  alert: {\r\n      width: '100%',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n  },\r\n}))\r\n\r\nconst formatter = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'IDR'});\r\n\r\nfunction format(num) {\r\n  let res = formatter.format(num).split('IDR');\r\n  res = res.slice(1);\r\n  return `Rp.${res}`\r\n}\r\n\r\n\r\nfunction Row (props) {\r\n    const {row} = props;\r\n    const classes = useRowStyles();\r\n    const [open, setOpen] = useState(false);\r\n    \r\n    \r\n    const subtotal = calculateSubtotal(row);\r\n    function calculateSubtotal(row) {\r\n      let total = 0;\r\n      for (let i = 0; i < row.basket.length; i++) {\r\n        total += row.basket[i].total;\r\n      }\r\n      return total;\r\n    }\r\n\r\n    const totalBayar = getTotalBayar(row);\r\n    function getTotalBayar(row) {\r\n      return row.ongkir + subtotal;\r\n    }\r\n\r\n    const handleDeleteClick = (id) => {\r\n      props.id(id)\r\n      props.confirm(true);\r\n    }\r\n\r\n    const handleEditClick = (id) => {\r\n      window.location.href = '/edit/'+id;\r\n    }\r\n\r\n    const change  = (paid) => {\r\n      if (paid) return 'Sudah';\r\n      else return 'Belum'\r\n    }\r\n    \r\n\r\n    return (\r\n        <>\r\n                <TableRow className = {classes.root}>\r\n                    <TableCell>\r\n                        <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n                            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                        </IconButton>\r\n                    </TableCell>\r\n                    <TableCell component=\"th\" scope=\"row\">{row.buyer}</TableCell>\r\n                    <TableCell align=\"left\">{row.address}</TableCell>\r\n                    <TableCell align=\"left\">{row.contact}</TableCell>\r\n                    <TableCell align=\"left\">{format(row.total)}</TableCell>\r\n                    <TableCell align=\"left\">{change(row.paid)}</TableCell>\r\n                    <TableCell align=\"left\">\r\n                      <div>\r\n                        {/* <Tooltip title = \"Ubah Orderan\">\r\n                          <IconButton> <EditIcon onClick = {() => handleEditClick(row._id)}/></IconButton>\r\n                        </Tooltip> */}\r\n                        <Tooltip title = \"Hapus Ordran\">\r\n                          <IconButton> <DeleteIcon onClick = {() => handleDeleteClick(row._id)}/></IconButton>\r\n                        </Tooltip>\r\n                      </div>\r\n                    </TableCell>\r\n                </TableRow>\r\n\r\n                <TableRow>\r\n                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                            <Box margin={1}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                Pembelian\r\n                            </Typography>\r\n                            <TableContainer component={Paper}>\r\n                            <Table size=\"small\" aria-label=\"purchases\">\r\n                                <TableHead>\r\n                                  {/* Small Table's Head */}\r\n                                    <TableRow>\r\n                                        <TableCell>Produk</TableCell>\r\n                                        <TableCell>Jumlah</TableCell>\r\n                                        <TableCell>Keterangan </TableCell>\r\n                                        <TableCell>Total (Rp.)</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {/* Small Table' Data*/}\r\n                                    {\r\n                                      row.basket.map(product => (\r\n                                        <>\r\n                                          <TableRow>\r\n                                            <TableCell component = \"th\" scope = \"row\">{product.name}</TableCell>\r\n                                            <TableCell>{product.qty}</TableCell>\r\n                                            <TableCell >{product.desc}</TableCell>\r\n                                            <TableCell>{format(product.total)}</TableCell>\r\n                                          </TableRow>\r\n                                        </>\r\n                                      ))\r\n                                    }\r\n                                    <TableRow>\r\n                                        <TableCell rowSpan = {3}/>\r\n                                        <TableCell rowSpan = {3}/>\r\n                                        <TableCell colSpan = {1}>Subtotal</TableCell>\r\n                                        <TableCell align = \"right\" >{format(subtotal)}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>Ongkir</TableCell>\r\n                                        <TableCell align = \"right\">{format(row.ongkir)}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>Total Pembayaran</TableCell>\r\n                                        <TableCell align = \"right\">{format(totalBayar)}</TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                            </TableContainer>\r\n                            </Box>\r\n                        </Collapse>\r\n                    </TableCell>\r\n                    \r\n                </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nRow.propTypes = {\r\n  row: PropTypes.shape({\r\n    basket: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        name: PropTypes.string,\r\n        qty: PropTypes.number, \r\n        desc: PropTypes.string,\r\n        total: PropTypes.number,\r\n      })\r\n    )\r\n  })\r\n}\r\n\r\nexport default function Orderlist() {\r\n    const [orderData, setOrderData] = useState([]);\r\n    const [confirm, setConfirm] = useState(false);\r\n    const [idValue, setIdValue] = useState('');\r\n    const [date, setDate] = useState(new Date());\r\n    const [query, setQuery] = useState(moment().format('DD/MM/YYYY'));\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n      getDateOrders(query)\r\n      .then((res) => {\r\n        if (res.data.status == 'ok') {\r\n          setOrderData(res.data.msg);\r\n          console.log(res.data.msg);\r\n        }\r\n        else console.log(res);\r\n      })\r\n      .catch(err => alert(err));\r\n    }, [query])\r\n\r\n    const handleCloseDialog = () => {\r\n      setConfirm(false);\r\n    }\r\n\r\n    const onChangeDate = (e) => {\r\n      setQuery(moment(e).format('DD/MM/YYYY'));\r\n      setDate(e);\r\n    }\r\n\r\n    const onDeleteOrder = (id) => {\r\n      deleteOrder(id)\r\n      .then((res) => {\r\n        if (res.data.status == 'ok') {\r\n          alert(res.data.msg);\r\n          window.location.href = '/';\r\n        }\r\n        else alert(res.data.msg);\r\n      })\r\n      .catch((err) => alert(err));\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <h2>Orderlist</h2>\r\n        <div className = {classes.rowContainer}>\r\n            <div className = {classes.columnName}>Tanggal Pengiriman</div>\r\n            <div className = {classes.columnData}> \r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\" \r\n                        value={date}\r\n                        onChange={(e) => onChangeDate(e)}\r\n                        KeyboardButtonProps={{\r\n                            'aria-label': 'change date',\r\n                        }}\r\n                    />\r\n            </MuiPickersUtilsProvider>\r\n            </div>\r\n        </div>\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label=\"collapsible table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell />\r\n                <TableCell>Customer</TableCell>\r\n                <TableCell align = \"left\">Alamat</TableCell>\r\n                <TableCell align = \"left\">Contact</TableCell>\r\n                <TableCell align = \"left\">Total</TableCell>\r\n                <TableCell align = \"left\">Bayar</TableCell>\r\n                <TableCell align = \"left\"> </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {\r\n                orderData.map(row => (\r\n                  <Row row = {row} id = {idValue => setIdValue(idValue)} confirm = {conf => setConfirm(conf)}/>\r\n                ))\r\n              }\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <Dialog\r\n                  open={confirm}\r\n                  onClose={handleCloseDialog}\r\n                  aria-labelledby=\"alert-dialog-title\"\r\n                  aria-describedby=\"alert-dialog-description\"\r\n        >\r\n                  <DialogTitle id=\"alert-dialog-title\">{\"Hapus Orderan Ini?\"}</DialogTitle>\r\n                    <DialogContent>\r\n                      <DialogContentText id=\"alert-dialog-description\">\r\n                          Order yang dihapus tidak dapat dibalikkan kembali.\r\n                      </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                      <Button onClick={() => setConfirm(false)} color=\"primary\">\r\n                          Kembali\r\n                      </Button>\r\n                      <Button onClick={() => onDeleteOrder(idValue)} color=\"primary\" autoFocus>\r\n                          Hapus\r\n                      </Button>\r\n                    </DialogActions>\r\n                    \r\n        </Dialog>\r\n      </>\r\n    );\r\n}","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\EditProduct.js",["77","78","79"],"import React, {useEffect, useState} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport {makeStyles} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nimport {getProduct, editProduct} from '../api';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    columnData: {\r\n        width: '600px'\r\n    }, \r\n    columnName: {\r\n        width: '200px'\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',   \r\n        width: '100%'\r\n    }, \r\n    grid: {\r\n        marginLeft: '20px'\r\n    }, \r\n    myCard: {\r\n        width: '100%',  \r\n    }, \r\n    myButton: {\r\n        backgroundColor: '#00cccc', \r\n        color: '#ffffff'\r\n    }, \r\n    textField: {\r\n        marginTop: '10px',   \r\n        marginBottom: '10px'\r\n    }, \r\n    root: {\r\n        flexDirection: 'column',   \r\n        justifyContent: 'flex-start', \r\n        alignItems: 'flex-start', \r\n        height: '100vh', \r\n        width: '900px', \r\n        marginLeft: '80px', \r\n        marginTop: '80px'\r\n    }\r\n}))\r\n\r\nexport default function EditProduct () {\r\n    const [name, setName] = useState('');\r\n    const [category, setCategory] = useState('');\r\n    const [price, setPrice] = useState(0);\r\n\r\n    let {id} = useParams();\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        getProduct(id)\r\n        .then((res) => {\r\n            if (res.data.status == 'ok') {\r\n                setName(res.data.product.name);\r\n                setCategory(res.data.product.category);\r\n                setPrice(res.data.product.price);\r\n            }\r\n            else alert(res.data.msg);\r\n            \r\n        })\r\n        .catch((err) => console.log(err));\r\n    }, []);\r\n\r\n    const submitEditProduct = () => {\r\n        editProduct(id,name,category,price)\r\n        .then((res) => {\r\n            if (res.data.status == 'ok') {\r\n                window.location.href = '/pricelist';\r\n                alert(res.data.msg);\r\n            } else alert(res.data.msg);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid>\r\n                        <h2>UBAH PRODUK</h2>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Nama Buah</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {name}\r\n                                    onChange = {(e) => setName(e.target.value)}\r\n                                    \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        {/* <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Jenis Buah</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    onChange = {(e) => setCategory(e.target.value)}\r\n                                    value = {category}\r\n                                />\r\n                            </div>\r\n                        </div> */}\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Harga Jual</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"number\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    onChange = {(e) => setPrice(e.target.value)}\r\n                                    value = {price}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {() => window.location.href = '/pricelist'}\r\n                            style = {{marginRight: '20px'}}\r\n                        >\r\n                            kembali\r\n                        </Button>\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {submitEditProduct}\r\n                            color = \"secondary\"\r\n                        >\r\n                            ubah\r\n                        </Button>\r\n\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    )\r\n}","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\AddProduct.js",["80"],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Sales.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\EditOrder.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":10,"column":9,"nodeType":"87","messageId":"88","endLine":10,"endColumn":15},{"ruleId":"85","severity":1,"message":"89","line":11,"column":8,"nodeType":"87","messageId":"88","endLine":11,"endColumn":14},{"ruleId":"90","severity":1,"message":"91","line":137,"column":33,"nodeType":"92","messageId":"93","endLine":137,"endColumn":35},{"ruleId":"94","severity":1,"message":"95","line":149,"column":8,"nodeType":"96","endLine":149,"endColumn":10,"suggestions":"97"},{"ruleId":"90","severity":1,"message":"91","line":174,"column":33,"nodeType":"92","messageId":"93","endLine":174,"endColumn":35},{"ruleId":"81","replacedBy":"98"},{"ruleId":"83","replacedBy":"99"},{"ruleId":"85","severity":1,"message":"100","line":14,"column":38,"nodeType":"87","messageId":"88","endLine":14,"endColumn":49},{"ruleId":"94","severity":1,"message":"101","line":72,"column":8,"nodeType":"96","endLine":72,"endColumn":10,"suggestions":"102"},{"ruleId":"90","severity":1,"message":"91","line":77,"column":33,"nodeType":"92","messageId":"93","endLine":77,"endColumn":35},{"ruleId":"90","severity":1,"message":"91","line":96,"column":33,"nodeType":"92","messageId":"93","endLine":96,"endColumn":35},{"ruleId":"85","severity":1,"message":"103","line":18,"column":8,"nodeType":"87","messageId":"88","endLine":18,"endColumn":17},{"ruleId":"85","severity":1,"message":"104","line":19,"column":8,"nodeType":"87","messageId":"88","endLine":19,"endColumn":16},{"ruleId":"85","severity":1,"message":"105","line":26,"column":8,"nodeType":"87","messageId":"88","endLine":26,"endColumn":21},{"ruleId":"85","severity":1,"message":"106","line":19,"column":8,"nodeType":"87","messageId":"88","endLine":19,"endColumn":16},{"ruleId":"85","severity":1,"message":"107","line":125,"column":11,"nodeType":"87","messageId":"88","endLine":125,"endColumn":26},{"ruleId":"90","severity":1,"message":"91","line":242,"column":29,"nodeType":"92","messageId":"93","endLine":242,"endColumn":31},{"ruleId":"90","severity":1,"message":"91","line":263,"column":29,"nodeType":"92","messageId":"93","endLine":263,"endColumn":31},{"ruleId":"90","severity":1,"message":"91","line":62,"column":33,"nodeType":"92","messageId":"93","endLine":62,"endColumn":35},{"ruleId":"94","severity":1,"message":"108","line":71,"column":8,"nodeType":"96","endLine":71,"endColumn":10,"suggestions":"109"},{"ruleId":"90","severity":1,"message":"91","line":76,"column":33,"nodeType":"92","messageId":"93","endLine":76,"endColumn":35},{"ruleId":"90","severity":1,"message":"91","line":60,"column":33,"nodeType":"92","messageId":"93","endLine":60,"endColumn":35},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'format' is defined but never used.","Identifier","unusedVar","'moment' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formatCurrency'. Either include it or remove the dependency array.","ArrayExpression",["112"],["110"],["111"],"'editProduct' is defined but never used.","React Hook useEffect has a missing dependency: 'loadPricelist'. Either include it or remove the dependency array.",["113"],"'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","'EqualizerIcon' is defined but never used.","'EditIcon' is defined but never used.","'handleEditClick' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [formatCurrency]",{"range":"121","text":"122"},"Update the dependencies array to be: [loadPricelist]",{"range":"123","text":"124"},"Update the dependencies array to be: [id]",{"range":"125","text":"126"},[4428,4430],"[formatCurrency]",[2459,2461],"[loadPricelist]",[1949,1951],"[id]"]