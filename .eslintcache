[{"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\index.js":"1","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\App.js":"2","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Input.js":"3","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Router.js":"4","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Pricelist.js":"5","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\api\\index.js":"6","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Navigations.js":"7","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Orderlist.js":"8","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\EditProduct.js":"9","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\AddProduct.js":"10","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Sales.js":"11","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\EditOrder.js":"12","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Loading.js":"13","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\pages\\yeet.js":"14","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\pages\\Yeet.js":"15","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\OrderlistCustomer.js":"16","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\DailyStats.js":"17"},{"size":493,"mtime":1611596906956,"results":"18","hashOfConfig":"19"},{"size":313,"mtime":1614089371907,"results":"20","hashOfConfig":"19"},{"size":12584,"mtime":1613415338382,"results":"21","hashOfConfig":"19"},{"size":320,"mtime":1610990956266,"results":"22","hashOfConfig":"19"},{"size":5648,"mtime":1614158094044,"results":"23","hashOfConfig":"19"},{"size":4893,"mtime":1613664310764,"results":"24","hashOfConfig":"19"},{"size":7024,"mtime":1613662913878,"results":"25","hashOfConfig":"19"},{"size":14544,"mtime":1614178017086,"results":"26","hashOfConfig":"19"},{"size":6549,"mtime":1613343705389,"results":"27","hashOfConfig":"19"},{"size":6200,"mtime":1613248877807,"results":"28","hashOfConfig":"19"},{"size":215,"mtime":1614092281813,"results":"29","hashOfConfig":"19"},{"size":13700,"mtime":1613249203574,"results":"30","hashOfConfig":"19"},{"size":592,"mtime":1612336552100,"results":"31","hashOfConfig":"19"},{"size":126,"mtime":1613373124732,"results":"32","hashOfConfig":"19"},{"size":472,"mtime":1613374123778,"results":"33","hashOfConfig":"19"},{"size":12704,"mtime":1613448755770,"results":"34","hashOfConfig":"19"},{"size":5370,"mtime":1614178037942,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1oqul5q",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\index.js",[],["77","78"],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\App.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Input.js",["79"],"/* \r\n    Perhaps we check whether URL contains id or not?\r\n    If there is, we query that id, and display as an Edit Order Page,\r\n    if not, we dont query the id, and display it as Input Order Page.\r\n\r\n*/\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport 'date-fns';\r\n// import {format} from 'date-fns';\r\n// import moment from 'moment';\r\nimport MUIDataTable from 'mui-datatables';\r\nimport {makeStyles} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nimport _ from 'lodash';\r\n\r\nimport Loading from './Loading';\r\nimport {getPricelist, addOrder} from '../api';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    columnData: {\r\n        width: '600px'\r\n    }, \r\n    columnName: {\r\n        width: '200px'\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',   \r\n        width: '100%'\r\n    }, \r\n    grid: {\r\n        marginLeft: '20px'\r\n    }, \r\n    myCard: {\r\n        width: '100%',  \r\n    }, \r\n    myButton: {\r\n        backgroundColor: '#00cccc', \r\n        color: '#ffffff'\r\n    }, \r\n    textField: {\r\n        marginTop: '10px',   \r\n        marginBottom: '10px'\r\n    }, \r\n    root: {\r\n        flexDirection: 'column',   \r\n        justifyContent: 'flex-start', \r\n        alignItems: 'flex-start', \r\n        height: '100vh', \r\n        width: '900px', \r\n        marginLeft: '80px', \r\n        marginTop: '80px'\r\n    }, \r\n    alert: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}))\r\n\r\nexport default function Input () {\r\n    const classes = useStyles();\r\n    const [list, setList] = useState([]);\r\n    const [customer, setCustomer] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [contact, setContact] = useState('');\r\n    const [sendDate, setSendDate] = useState(new Date());\r\n    const [open, setOpen] = useState(false);\r\n    const [paid, setPaid] = useState(false);\r\n    const [ongkir, setOngkir] = useState(0)\r\n    const [loading, setLoading] = useState(false);\r\n\r\n\r\n    const columns = [\r\n        {\r\n            name: 'name',\r\n            label: 'Produk'\r\n        }, \r\n        {\r\n            name: 'qty',\r\n            label: 'Quantity',\r\n            options: {\r\n                customBodyRender: (value, meta) => {\r\n                    return (\r\n                        <TextField \r\n                            value = {value}\r\n                            variant = \"outlined\"\r\n                            type = \"number\"\r\n                            InputProps = {{inputProps: {min: 0}}}\r\n                            onChange = {(e) => onUpdateQty(meta.rowIndex, e.target.value)}\r\n                        />\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: 'strPrice',\r\n            label: 'Harga',\r\n        }, \r\n        {\r\n            name: 'desc', \r\n            label: 'Keterangan', \r\n            options: {\r\n                customBodyRender: (value, meta) => {\r\n                    return (\r\n                        <TextField \r\n                            value = {value}\r\n                            variant = \"outlined\"\r\n                            type = \"text\"\r\n                            onChange = {(e) => onUpdateDesc(meta.rowIndex, e.target.value)}\r\n                        />\r\n                    )\r\n                }\r\n            }\r\n        },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        getPricelist()\r\n        .then((res) => {\r\n            if (res.data.status === 'ok') {\r\n                for (let i = 0; i < res.data.list.length; i++) {\r\n                    console.log(res.data.list);\r\n                    let product = res.data.list[i];\r\n                    product.strPrice = formatCurrency(product.price);\r\n                    product.desc = \"\"\r\n                    \r\n                }\r\n                setList(res.data.list);\r\n            }\r\n            else alert(res.data.msg);\r\n        })\r\n        .catch(err => alert(err));\r\n    }, []);\r\n\r\n    const handleDateChange = (date) => {\r\n        setSendDate(date);\r\n    }\r\n\r\n    const onUpdateQty = (rowIndex, qty) => {\r\n        let updateProducts = [ ...list ];\r\n        let price = updateProducts[rowIndex].price;\r\n        updateProducts[rowIndex].qty = qty;\r\n        updateProducts[rowIndex].total = qty * price;\r\n        setList(updateProducts);\r\n        // console.log(updateProducts);\r\n    }\r\n\r\n    const onUpdateDesc = (rowIndex, text) => {\r\n        let updateProducts = [ ...list ];\r\n        updateProducts[rowIndex].desc = text;\r\n        setList(updateProducts);\r\n    }\r\n\r\n    const onSave = (customer, address, contact, paid, ongkir, sendDate) => {\r\n        setLoading(true);\r\n        const bracket =  _.filter(list, o => o.qty > 0);\r\n        console.log(bracket);\r\n        addOrder(customer, address, contact, bracket, paid, ongkir, sendDate, list)\r\n        .then((res) => {\r\n            if (res.data.status === 'ok') {\r\n                setLoading(false);\r\n                alert(res.data.msg);\r\n                window.location.href = '/'\r\n            }\r\n            else alert(res.data.msg); setLoading(false);\r\n        })\r\n        .catch(() => alert('Coba ulangi kembali'))\r\n    }\r\n\r\n    function Alert(props) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n    }\r\n\r\n    const handleClose = (reason) => {\r\n        setCustomer('');\r\n        setAddress('');\r\n        setContact('');\r\n        setOpen(false);\r\n        if (reason === 'clickaway'){\r\n            return;\r\n        }\r\n        window.location.href = '/'\r\n    }\r\n\r\n    const handleChecks = (e) => {\r\n        setPaid(e.target.checked);\r\n    }\r\n\r\n\r\n    const formatter = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'IDR'});\r\n    function formatCurrency(num) {\r\n        let res = formatter.format(num).split('IDR');\r\n        res = res.slice(1);\r\n        return `Rp.${res}`\r\n    }\r\n\r\n    return (\r\n        <> \r\n            <div className = {classes.alert}>\r\n                <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} color=\"success\">\r\n                        Orderan telah tercatat! \r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n                \r\n            <Card>\r\n                <CardContent>\r\n                    <Grid>\r\n                        <h2>Tambah Orderan</h2>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Nama Customer</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {customer}\r\n                                    onChange = {(e) => setCustomer(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Contact</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {contact}\r\n                                    onChange = {(e) => setContact(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Alamat</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {address}\r\n                                    onChange = {(e) => setAddress(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Ongkir</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"number\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {ongkir}\r\n                                    onChange = {(e) => setOngkir(e.target.value)}\r\n                                    InputProps = {{inputProps: {min: 0}}}\r\n                                ></TextField>\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Tanggal Pengiriman</div>\r\n                            <div className = {classes.columnData}> \r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        \r\n                                        value={sendDate}\r\n                                        onChange={(e) => handleDateChange(e)}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                            </MuiPickersUtilsProvider>\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Sudah dibayar</div>\r\n                            <div className = {classes.columnData}> \r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <Checkbox\r\n                                        checked={paid}\r\n                                        onChange={handleChecks}\r\n                                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                    />\r\n                            </MuiPickersUtilsProvider>\r\n                            </div>\r\n                        </div>\r\n                        <MUIDataTable \r\n                            title = \"List Produk\"\r\n                            data = {list}\r\n                            columns = {columns}\r\n                            \r\n                        />\r\n\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {() => onSave(customer, address, contact,paid, ongkir, sendDate)}\r\n                            color = \"secondary\"\r\n                            style = {{marginTop: \"20px\"}}\r\n                        >\r\n                            Tambah\r\n                        </Button>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n            <Loading open = {loading} />\r\n        </>\r\n    )\r\n}","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Router.js",[],["80","81"],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Pricelist.js",["82"],"import React, {useState, useEffect} from 'react';\r\nimport MUIDataTable from 'mui-datatables';\r\nimport Button from '@material-ui/core/Button'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport Loading from './Loading';\r\nimport {getPricelist, deleteProduct} from '../api';\r\n\r\nimport useSWR from 'swr';\r\n\r\nconst fetcher = (...args) => fetch(...args).then(res => res.json());\r\nexport default function Pricelist () {\r\n    const [products, setProducts] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [id, setId] = useState({});\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const URL = 'https://pasar-medan.herokuapp.com/order/all';\r\n    const {pricelist} = useSWR(URL, fetcher);\r\n    console.log(pricelist);\r\n\r\n\r\n    const columns = [\r\n        {\r\n\r\n            name: 'name', \r\n            label: 'Produk', \r\n            options: {}\r\n        }, \r\n        {\r\n            name: 'strPrice', \r\n            label: 'Harga Jual', \r\n            options: {}\r\n        },\r\n        {\r\n            name: 'strCost', \r\n            label: 'Modal',\r\n            options: {}\r\n        },\r\n        {\r\n            name: '_id', \r\n            label: ' ', \r\n            options: {\r\n                filter: false, \r\n                sort: false, \r\n                customBodyRender: (id) => {\r\n                    return (\r\n                        <div>\r\n                            <Tooltip title = \"Ubah Produk\">\r\n                                <IconButton>\r\n                                    <EditIcon onClick = {() => redirectToEditProduct(id)}/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title = \"Hapus Produk\">\r\n                                <IconButton>\r\n                                    <DeleteIcon onClick = {() => handleClickOpen(id)}/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    ]\r\n\r\n    const options = {\r\n        filterType: 'checkbox', \r\n        responsive: 'standard'\r\n    }\r\n\r\n    const formatter = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'IDR'});\r\n    function formatCurrency(num) {\r\n        let res = formatter.format(num).split('IDR');\r\n        res = res.slice(1);\r\n        return `Rp.${res}`\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setLoading(true);\r\n        loadPricelist();\r\n    }, []);\r\n\r\n    const loadPricelist = () => {\r\n        getPricelist()\r\n        .then(res => {\r\n            if (res.data.status === 'ok') {\r\n                for (let i = 0; i < res.data.list.length; i++) {\r\n                    let product = res.data.list[i];\r\n                    product.strPrice = formatCurrency(product.price);\r\n                    product.strCost = formatCurrency(product.cost);\r\n                }\r\n                setProducts(res.data.list);\r\n                setLoading(false);\r\n            }\r\n            else alert(res.data.msg); setLoading(false);\r\n        })\r\n        .catch(() => alert('Coba ulangi kembali'));\r\n    }\r\n\r\n    const redirectToEditProduct = (id) => {\r\n        window.location.href = '/#/product/edit/'+id\r\n    }\r\n\r\n    const onDeleteProduct = (id) => {\r\n        deleteProduct(id)\r\n        .then((res) => {\r\n            if (res.data.status === 'ok') {\r\n                setOpen(false);\r\n                loadPricelist();\r\n            }\r\n            else alert(res.data.msg);\r\n        })\r\n        .catch(err => alert(err));\r\n    }\r\n\r\n    const handleClickOpen = (id) => {\r\n        setId(id);\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button \r\n                style = {{marginBottom: '10px'}}\r\n                variant = \"contained\" \r\n                color = \"primary\"\r\n                onClick = {() => window.location.href = '/#/add'}\r\n            >\r\n                Tambahkan produk\r\n            </Button>\r\n            <MUIDataTable \r\n                title = \"Pricelist\"\r\n                data = {products}\r\n                columns = {columns}\r\n                options = {options}\r\n            />\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Hapus Produk Ini?\"}</DialogTitle>\r\n                <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    Produk yang dihapus tidak dapat dibalikkan kembali.\r\n                </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Kembali\r\n                </Button>\r\n                <Button onClick={() => onDeleteProduct(id)} color=\"primary\" autoFocus>\r\n                    Hapus\r\n                </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Loading open = {loading}/>\r\n        </>\r\n    )\r\n}           ","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\api\\index.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Navigations.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Orderlist.js",["83","84","85","86"],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\EditProduct.js",["87"],"import React, {useEffect, useState} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport {makeStyles} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nimport Loading from './Loading';\r\nimport {getProduct, editProduct} from '../api';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    columnData: {\r\n        width: '600px'\r\n    }, \r\n    columnName: {\r\n        width: '200px'\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',   \r\n        width: '100%'\r\n    }, \r\n    grid: {\r\n        marginLeft: '20px'\r\n    }, \r\n    myCard: {\r\n        width: '100%',  \r\n    }, \r\n    myButton: {\r\n        backgroundColor: '#00cccc', \r\n        color: '#ffffff'\r\n    }, \r\n    textField: {\r\n        marginTop: '10px',   \r\n        marginBottom: '10px'\r\n    }, \r\n    root: {\r\n        flexDirection: 'column',   \r\n        justifyContent: 'flex-start', \r\n        alignItems: 'flex-start', \r\n        height: '100vh', \r\n        width: '900px', \r\n        marginLeft: '80px', \r\n        marginTop: '80px'\r\n    }\r\n}))\r\n\r\nexport default function EditProduct () {\r\n    const [name, setName] = useState('');\r\n    const [category, setCategory] = useState('');\r\n    const [price, setPrice] = useState(0);\r\n    const [cost, setCost] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    let {id} = useParams();\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        getProduct(id)\r\n        .then((res) => {\r\n            if (res.data.status === 'ok') {\r\n                setName(res.data.product.name);\r\n                setCategory(res.data.product.category);\r\n                setPrice(res.data.product.price);\r\n                setCost(res.data.product.cost);\r\n                setLoading(false);\r\n            }\r\n            else alert(res.data.msg); setLoading(false);\r\n            \r\n        })\r\n        .catch((err) => alert(err));\r\n    }, []);\r\n\r\n    const submitEditProduct = () => {\r\n        setLoading(true);\r\n        editProduct(id,name,category,price,cost)\r\n        .then((res) => {\r\n            if (res.data.status === 'ok') {\r\n                setLoading(false);\r\n                window.location.href = '/#/pricelist';\r\n                alert(res.data.msg);\r\n            } else {\r\n                alert(res.data.msg);\r\n                setLoading(false);\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid>\r\n                        <h2>UBAH PRODUK</h2>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Nama Buah</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {name}\r\n                                    onChange = {(e) => setName(e.target.value)}\r\n                                    \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        {/* <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Jenis Buah</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    onChange = {(e) => setCategory(e.target.value)}\r\n                                    value = {category}\r\n                                />\r\n                            </div>\r\n                        </div> */}\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Harga Jual</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"number\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    onChange = {(e) => setPrice(e.target.value)}\r\n                                    value = {price}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Modal</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"number\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    onChange = {(e) => setCost(e.target.value)}\r\n                                    value = {cost}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {() => window.location.href = '/#/pricelist'}\r\n                            style = {{marginRight: '20px'}}\r\n                        >\r\n                            kembali\r\n                        </Button>\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {submitEditProduct}\r\n                            color = \"secondary\"\r\n                        >\r\n                            ubah\r\n                        </Button>\r\n\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n            <Loading open = {loading} />\r\n        </>\r\n    )\r\n}","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\AddProduct.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Sales.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\EditOrder.js",["88","89","90","91","92","93","94","95","96","97"],"\r\nimport React, {useState, useEffect} from 'react';\r\nimport 'date-fns';\r\nimport {format} from 'date-fns';\r\nimport moment from 'moment';\r\nimport MUIDataTable from 'mui-datatables';\r\nimport {makeStyles} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport {useParams} from 'react-router-dom';\r\n\r\nimport _ from 'lodash';\r\n\r\nimport Loading from './Loading';\r\nimport {getPricelist, findOrder, updateOrder} from '../api';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    columnData: {\r\n        width: '600px'\r\n    }, \r\n    columnName: {\r\n        width: '200px'\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',   \r\n        width: '100%'\r\n    }, \r\n    grid: {\r\n        marginLeft: '20px'\r\n    }, \r\n    myCard: {\r\n        width: '100%',  \r\n    }, \r\n    myButton: {\r\n        backgroundColor: '#00cccc', \r\n        color: '#ffffff'\r\n    }, \r\n    textField: {\r\n        marginTop: '10px',   \r\n        marginBottom: '10px'\r\n    }, \r\n    root: {\r\n        flexDirection: 'column',   \r\n        justifyContent: 'flex-start', \r\n        alignItems: 'flex-start', \r\n        height: '100vh', \r\n        width: '900px', \r\n        marginLeft: '80px', \r\n        marginTop: '80px'\r\n    }, \r\n    alert: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}))\r\n\r\nexport default function EditOrder () {\r\n    const classes = useStyles();\r\n    const [list, setList] = useState([]);\r\n    const [customer, setCustomer] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [contact, setContact] = useState('');\r\n    const [sendDate, setSendDate] = useState(new Date());\r\n    const [open, setOpen] = useState(false);\r\n    const [paid, setPaid] = useState(false);\r\n    const [ongkir, setOngkir] = useState(0)\r\n    const [subtotal, setSubtotal] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    let {id} = useParams();\r\n\r\n\r\n    const columns = [\r\n        {\r\n            name: 'name',\r\n            label: 'Produk'\r\n        }, \r\n        {\r\n            name: 'qty',\r\n            label: 'Quantity',\r\n            options: {\r\n                customBodyRender: (value, meta) => {\r\n                    return (\r\n                        <TextField \r\n                            value = {value}\r\n                            defaultValue = {3}\r\n                            variant = \"outlined\"\r\n                            type = \"number\"\r\n                            InputProps = {{inputProps: {min: 0}}}\r\n                            onChange = {(e) => onUpdateQty(meta.rowIndex, e.target.value)}\r\n                        />\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: 'strPrice',\r\n            label: 'Harga',\r\n        }, \r\n        {\r\n            name: 'desc', \r\n            label: 'Keterangan', \r\n            options: {\r\n                customBodyRender: (value, meta) => {\r\n                    return (\r\n                        <TextField \r\n                            value = {value}\r\n                            variant = \"outlined\"\r\n                            type = \"text\"\r\n                            onChange = {(e) => onUpdateDesc(meta.rowIndex, e.target.value)}\r\n                            // onChange = {e => test(meta)}\r\n                        />\r\n                    )\r\n                }\r\n            }\r\n        },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        // getPricelist()\r\n        // .then((res) => {\r\n        //     if (res.data.status == 'ok') {\r\n        //         for (let i = 0; i < res.data.list.length; i++) {\r\n        //             let product = res.data.list[i];\r\n        //             product.strPrice = formatCurrency(product.price);\r\n        //             product.desc = \"\"\r\n        //         }\r\n        //         setList(res.data.list);\r\n        //     }\r\n        //     else alert(res.data.msg)\r\n        // })\r\n        // .catch(err => console.log(err));\r\n        // console.log(total);\r\n        setLoading(true);\r\n        findOrder(id)\r\n        .then((res) => {\r\n            if (res.data.status == 'ok') {\r\n                // console.log(res.data);\r\n                let data = res.data.msg;\r\n                setCustomer(data.buyer);\r\n                setAddress(data.address);\r\n                setContact(data.contact);\r\n                setSendDate(data.sendDate);\r\n                setOngkir(data.ongkir);\r\n                setPaid(data.paid);\r\n                for (let i = 0; i < res.data.msg.fakelist.length; i++) {\r\n                    let product = res.data.msg.fakelist[i];\r\n                    product.strPrice = formatCurrency(product.price);\r\n                    // product.desc = \"\"\r\n                }\r\n                setList(data.fakelist);\r\n                setSubtotal(data.subtotal);\r\n                setLoading(false);\r\n            } else alert(res.data.msg); setLoading(false);\r\n        })\r\n    }, []);\r\n\r\n    const handleDateChange = (date) => {\r\n        setSendDate(date);\r\n    }\r\n\r\n    const onUpdateQty = (rowIndex, qty) => {\r\n        let updateProducts = [ ...list ];\r\n        let price = updateProducts[rowIndex].price;\r\n        updateProducts[rowIndex].qty = qty;\r\n        updateProducts[rowIndex].total = qty * price;\r\n        setList(updateProducts);\r\n    }\r\n\r\n    const onUpdateDesc = (rowIndex, text) => {\r\n        let updateProducts = [ ...list ];\r\n        updateProducts[rowIndex].desc = text;\r\n        setList(updateProducts);\r\n    }\r\n\r\n    const test = (meta) => {\r\n        console.log(meta);\r\n    }\r\n\r\n    const onSave = (customer, address, contact, paid, ongkir, sendDate, subtotal) => {\r\n        setLoading(true);\r\n        updateOrder(id, customer, address, contact, paid, ongkir, sendDate, subtotal)\r\n        .then((res) => {\r\n            if (res.data.status == 'ok') window.location.href = '/'\r\n            setLoading(false);\r\n            alert(res.data.msg);\r\n        })\r\n        .catch((err) => alert(err));\r\n    }\r\n\r\n    function Alert(props) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n    }\r\n\r\n    const handleClose = (reason) => {\r\n        setCustomer('');\r\n        setAddress('');\r\n        setContact('');\r\n        setOpen(false);\r\n        if (reason === 'clickaway'){\r\n            return;\r\n        }\r\n        window.location.href = '/'\r\n    }\r\n\r\n    const handleChecks = (e) => {\r\n        setPaid(e.target.checked);\r\n    }\r\n\r\n\r\n    const formatter = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'IDR'});\r\n    function formatCurrency(num) {\r\n        let res = formatter.format(num).split('IDR');\r\n        res = res.slice(1);\r\n        return `Rp.${res}`\r\n    }\r\n\r\n    return (\r\n        <> \r\n            <div className = {classes.alert}>\r\n                <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} color=\"success\">\r\n                        Orderan telah tercatat! \r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n                \r\n            <Card>\r\n                <CardContent>\r\n                    <Grid>\r\n                        <h2>Ubah Orderan</h2>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Nama Customer</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {customer}\r\n                                    onChange = {(e) => setCustomer(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Contact</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {contact}\r\n                                    onChange = {(e) => setContact(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Alamat</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"text\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {address}\r\n                                    onChange = {(e) => setAddress(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Ongkir</div>\r\n                            <div className = {classes.columnData}> \r\n                                <TextField \r\n                                    type = \"number\" \r\n                                    variant = \"outlined\" \r\n                                    fullWidth \r\n                                    className = {classes.textField} \r\n                                    value = {ongkir}\r\n                                    onChange = {(e) => setOngkir(e.target.value)}\r\n                                    InputProps = {{inputProps: {min: 0}}}\r\n                                ></TextField>\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Tanggal Pengiriman</div>\r\n                            <div className = {classes.columnData}> \r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        \r\n                                        value={sendDate}\r\n                                        onChange={(e) => handleDateChange(e)}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                            </MuiPickersUtilsProvider>\r\n                            </div>\r\n                        </div>\r\n                        <div className = {classes.rowContainer}>\r\n                            <div className = {classes.columnName}>Sudah dibayar</div>\r\n                            <div className = {classes.columnData}> \r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <Checkbox\r\n                                        checked={paid}\r\n                                        onChange={handleChecks}\r\n                                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                    />\r\n                            </MuiPickersUtilsProvider>\r\n                            </div>\r\n                        </div>\r\n                        {/* <MUIDataTable \r\n                            title = \"List Produk\"\r\n                            data = {list}\r\n                            columns = {columns}\r\n                        /> */}\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {() => window.location.href = '/#/'}\r\n                            style = {{marginTop: '20px', marginRight: '20px'}}\r\n                        >\r\n                            kembali\r\n                        </Button>\r\n                        <Button\r\n                            variant = \"contained\"\r\n                            onClick = {() => onSave(customer, address, contact,paid, ongkir, sendDate, subtotal)}\r\n                            color = \"secondary\"\r\n                            style = {{marginTop: \"20px\"}}\r\n                        >\r\n                            Ubah\r\n                        </Button>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n            <Loading open = {loading} />\r\n        </>\r\n    )\r\n}","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\Loading.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\pages\\yeet.js",["98","99","100"],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\pages\\Yeet.js",[],"C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\OrderlistCustomer.js",["101","102","103","104","105"],"import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nimport moment from 'moment';\r\nimport useSWR from 'swr'\r\n\r\nimport Loading from './Loading';\r\nimport {getDateOrders, deleteOrder, all, getDateRange, rangeSales} from '../api';\r\n\r\nconst fetcher = (...args) => fetch(...args).then((res) => res.json())\r\n\r\nconst useRowStyles = makeStyles({\r\n    root: {\r\n      '& > *': {\r\n        borderBottom: 'unset',\r\n      },\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  columnData: {\r\n      width: '600px'\r\n  }, \r\n  columnName: {\r\n      width: '200px'\r\n  },\r\n  rowContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'flex-start',\r\n      alignItems: 'center',   \r\n      width: '100%'\r\n  }, \r\n  grid: {\r\n      marginLeft: '20px'\r\n  }, \r\n  myCard: {\r\n      width: '100%',  \r\n  }, \r\n  myButton: {\r\n      backgroundColor: '#00cccc', \r\n      color: '#ffffff'\r\n  }, \r\n  textField: {\r\n      marginTop: '10px',   \r\n      marginBottom: '10px'\r\n  }, \r\n  root: {\r\n      flexDirection: 'column',   \r\n      justifyContent: 'flex-start', \r\n      alignItems: 'flex-start', \r\n      height: '100vh', \r\n      width: '900px', \r\n      marginLeft: '80px', \r\n      marginTop: '80px'\r\n  }, \r\n  alert: {\r\n      width: '100%',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n  },\r\n}))\r\n\r\nconst formatter = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'IDR'});\r\n\r\nfunction format(num) {\r\n  let res = formatter.format(num).split('IDR');\r\n  res = res.slice(1);\r\n  return `Rp.${res}`\r\n}\r\n\r\n\r\nfunction Row (props) {\r\n    const {row} = props;\r\n    const classes = useRowStyles();\r\n    const [open, setOpen] = useState(false);\r\n    \r\n    \r\n    const subtotal = calculateSubtotal(row);\r\n    function calculateSubtotal(row) {\r\n      let total = 0;\r\n      for (let i = 0; i < row.basket.length; i++) {\r\n        total += row.basket[i].total;\r\n      }\r\n      return total;\r\n    }\r\n\r\n    const totalBayar = getTotalBayar(row);\r\n    function getTotalBayar(row) {\r\n      return row.ongkir + subtotal;\r\n    }\r\n\r\n    const handleDeleteClick = (id) => {\r\n      props.id(id)\r\n      props.confirm(true);\r\n    }\r\n\r\n    const handleEditClick = (id) => {\r\n      window.location.href = '/#/edit/'+id;\r\n    }\r\n\r\n    const change  = (paid) => {\r\n      if (paid) return 'Sudah';\r\n      else return 'Belum'\r\n    }\r\n    \r\n    return (\r\n        <>\r\n          <TableRow className = {classes.root}>\r\n            <TableCell>\r\n              <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n                {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n              </IconButton>\r\n            </TableCell>\r\n            <TableCell component=\"th\" scope=\"row\">{row.buyer}</TableCell>\r\n            <TableCell align=\"left\">{row.contact}</TableCell>\r\n            <TableCell align=\"left\">{row.address}</TableCell>\r\n            {/* <TableCell align=\"left\">{format(row.totalCost)}</TableCell> */}\r\n            <TableCell align=\"left\">{format(row.total)}</TableCell>\r\n            <TableCell align=\"left\">{change(row.paid)}</TableCell>\r\n            <TableCell align=\"left\">\r\n              <div>\r\n                <Tooltip title = \"Ubah Orderan\">\r\n                  <IconButton> <EditIcon onClick = {() => handleEditClick(row._id)}/></IconButton>\r\n                </Tooltip>\r\n                <Tooltip title = \"Hapus Ordran\">\r\n                  <IconButton> <DeleteIcon onClick = {() => handleDeleteClick(row._id)}/></IconButton>\r\n                </Tooltip>\r\n              </div>\r\n            </TableCell>\r\n          </TableRow>\r\n\r\n                <TableRow>\r\n                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                            <Box margin={1}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                Pembelian\r\n                            </Typography>\r\n                            <TableContainer component={Paper}>\r\n                            <Table size=\"small\" aria-label=\"purchases\">\r\n                                <TableHead>\r\n                                  {/* Small Table's Head */}\r\n                                    <TableRow>\r\n                                        <TableCell>Produk</TableCell>\r\n                                        <TableCell>Jumlah</TableCell>\r\n                                        <TableCell>Keterangan </TableCell>\r\n                                        <TableCell>Total (Rp.)</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {/* Small Table' Data*/}\r\n                                    {\r\n                                      row.basket.map(product => (\r\n                                        <>\r\n                                          <TableRow>\r\n                                            <TableCell component = \"th\" scope = \"row\">{product.name}</TableCell>\r\n                                            <TableCell>{product.qty}</TableCell>\r\n                                            <TableCell >{product.desc}</TableCell>\r\n                                            <TableCell>{format(product.total)}</TableCell>\r\n                                          </TableRow>\r\n                                        </>\r\n                                      ))\r\n                                    }\r\n                                    <TableRow>\r\n                                        <TableCell rowSpan = {3}/>\r\n                                        <TableCell rowSpan = {3}/>\r\n                                        <TableCell colSpan = {1}>Subtotal</TableCell>\r\n                                        <TableCell align = \"right\" >{format(subtotal)}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>Ongkir</TableCell>\r\n                                        <TableCell align = \"right\">{format(row.ongkir)}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>Total Pembayaran</TableCell>\r\n                                        <TableCell align = \"right\">{format(totalBayar)}</TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                            </TableContainer>\r\n                            </Box>\r\n                        </Collapse>\r\n                    </TableCell>\r\n                    \r\n                </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nRow.propTypes = {\r\n  row: PropTypes.shape({\r\n    basket: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        name: PropTypes.string,\r\n        qty: PropTypes.number, \r\n        desc: PropTypes.string,\r\n        total: PropTypes.number,\r\n      })\r\n    )\r\n  })\r\n}\r\n\r\n\r\n// const fetcher = (...args) => fetch(...args).then(res => res.json());\r\n\r\n\r\nexport default function Orderlist() {\r\n    const [orderData, setOrderData] = useState([]);\r\n    const [confirm, setConfirm] = useState(false);\r\n    const [idValue, setIdValue] = useState('');\r\n    const [query, setQuery] = useState(moment().format('DD/MM/YYYY'));\r\n    const [date,setDate] = useState(new Date());\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    \r\n\r\n    // const URL = 'https://pasar-medan.herokuapp.com/order/all';\r\n    // const {orders, err} = useSWR(URL, fetcher);\r\n    \r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n      setLoading(true);\r\n    //   getSalesData(startDate,endDate);\r\n      getDateOrders(query)\r\n      .then((res) => {\r\n        if (res.data.status === 'ok') {\r\n          setOrderData(res.data.msg);\r\n          setLoading(false);\r\n        }\r\n        else alert(res); setLoading(false);\r\n      })\r\n      .catch(err => alert(err));\r\n    }, [query])\r\n\r\n    const handleCloseDialog = () => {\r\n      setConfirm(false);\r\n    }\r\n\r\n    const onChangeDate = (e) => {\r\n      setQuery(moment(e).format('DD/MM/YYYY'));\r\n      setDate(e);\r\n    }\r\n\r\n    const onDeleteOrder = (id) => {\r\n      deleteOrder(id)\r\n      .then((res) => {\r\n        if (res.data.status === 'ok') {\r\n          alert(res.data.msg);\r\n          window.location.href = '/';\r\n        }\r\n        else alert(res.data.msg); setLoading(false);\r\n      })\r\n      .catch((err) => alert(err));\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <h2>Rekap Orderan (Customer)</h2>\r\n        \r\n        <div className = {classes.rowContainer} >\r\n            <div className = {classes.columnName}>Tanggal Awal</div>\r\n            <div className = {classes.columnData}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\" \r\n                        value={date}\r\n                        onChange={(e) => onChangeDate(e)}\r\n                        KeyboardButtonProps={{\r\n                            'aria-label': 'change date',\r\n                        }}\r\n                    />\r\n            </MuiPickersUtilsProvider>\r\n            </div>\r\n        </div>\r\n        \r\n        <br/>\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label=\"collapsible table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell />\r\n                <TableCell align = \"left\">Customer</TableCell>\r\n                <TableCell align = \"left\">Contact</TableCell>\r\n                <TableCell align = \"left\">Alamat</TableCell>\r\n                <TableCell align = \"left\">Total</TableCell>\r\n                <TableCell align = \"left\">Bayar</TableCell>\r\n                <TableCell align = \"left\"> </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {\r\n                orderData.map(row => (\r\n                  <Row row = {row} id = {idValue => setIdValue(idValue)} confirm = {conf => setConfirm(conf)}/>\r\n                ))\r\n              }\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        \r\n        <Dialog\r\n          open={confirm}\r\n          onClose={handleCloseDialog}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{\"Hapus Orderan Ini?\"}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              Order yang dihapus tidak dapat dibalikkan kembali.\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setConfirm(false)} color=\"primary\">\r\n              Kembali\r\n            </Button>\r\n            <Button onClick={() => onDeleteOrder(idValue)} color=\"primary\" autoFocus>\r\n              Hapus\r\n            </Button>\r\n          </DialogActions>   \r\n        </Dialog>\r\n        <Loading open = {loading} />\r\n      </>\r\n    );\r\n}","C:\\Users\\Marco Fernandio\\Desktop\\Work\\pasar.medan\\Web\\frontend\\src\\components\\DailyStats.js",["106","107","108","109"],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":152,"column":8,"nodeType":"116","endLine":152,"endColumn":10,"suggestions":"117"},{"ruleId":"110","replacedBy":"118"},{"ruleId":"112","replacedBy":"119"},{"ruleId":"114","severity":1,"message":"120","line":89,"column":8,"nodeType":"116","endLine":89,"endColumn":10,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":1,"column":26,"nodeType":"124","messageId":"125","endLine":1,"endColumn":35},{"ruleId":"122","severity":1,"message":"126","line":28,"column":8,"nodeType":"124","messageId":"125","endLine":28,"endColumn":14},{"ruleId":"122","severity":1,"message":"127","line":31,"column":9,"nodeType":"124","messageId":"125","endLine":31,"endColumn":22},{"ruleId":"122","severity":1,"message":"128","line":31,"column":37,"nodeType":"124","messageId":"125","endLine":31,"endColumn":40},{"ruleId":"114","severity":1,"message":"129","line":77,"column":8,"nodeType":"116","endLine":77,"endColumn":10,"suggestions":"130"},{"ruleId":"122","severity":1,"message":"131","line":4,"column":9,"nodeType":"124","messageId":"125","endLine":4,"endColumn":15},{"ruleId":"122","severity":1,"message":"132","line":5,"column":8,"nodeType":"124","messageId":"125","endLine":5,"endColumn":14},{"ruleId":"122","severity":1,"message":"133","line":6,"column":8,"nodeType":"124","messageId":"125","endLine":6,"endColumn":20},{"ruleId":"122","severity":1,"message":"134","line":24,"column":8,"nodeType":"124","messageId":"125","endLine":24,"endColumn":9},{"ruleId":"122","severity":1,"message":"135","line":27,"column":9,"nodeType":"124","messageId":"125","endLine":27,"endColumn":21},{"ruleId":"122","severity":1,"message":"136","line":90,"column":11,"nodeType":"124","messageId":"125","endLine":90,"endColumn":18},{"ruleId":"137","severity":1,"message":"138","line":154,"column":33,"nodeType":"139","messageId":"140","endLine":154,"endColumn":35},{"ruleId":"114","severity":1,"message":"141","line":173,"column":8,"nodeType":"116","endLine":173,"endColumn":10,"suggestions":"142"},{"ruleId":"122","severity":1,"message":"143","line":193,"column":11,"nodeType":"124","messageId":"125","endLine":193,"endColumn":15},{"ruleId":"137","severity":1,"message":"138","line":201,"column":33,"nodeType":"139","messageId":"140","endLine":201,"endColumn":35},{"ruleId":"122","severity":1,"message":"144","line":7,"column":13,"nodeType":"124","messageId":"125","endLine":7,"endColumn":17},{"ruleId":"122","severity":1,"message":"145","line":7,"column":19,"nodeType":"124","messageId":"125","endLine":7,"endColumn":24},{"ruleId":"146","severity":2,"message":"147","line":7,"column":29,"nodeType":"124","endLine":7,"endColumn":35},{"ruleId":"122","severity":1,"message":"126","line":34,"column":8,"nodeType":"124","messageId":"125","endLine":34,"endColumn":14},{"ruleId":"122","severity":1,"message":"128","line":37,"column":37,"nodeType":"124","messageId":"125","endLine":37,"endColumn":40},{"ruleId":"122","severity":1,"message":"148","line":37,"column":42,"nodeType":"124","messageId":"125","endLine":37,"endColumn":54},{"ruleId":"122","severity":1,"message":"149","line":37,"column":56,"nodeType":"124","messageId":"125","endLine":37,"endColumn":66},{"ruleId":"122","severity":1,"message":"150","line":39,"column":7,"nodeType":"124","messageId":"125","endLine":39,"endColumn":14},{"ruleId":"122","severity":1,"message":"123","line":1,"column":16,"nodeType":"124","messageId":"125","endLine":1,"endColumn":25},{"ruleId":"122","severity":1,"message":"151","line":14,"column":9,"nodeType":"124","messageId":"125","endLine":14,"endColumn":12},{"ruleId":"122","severity":1,"message":"152","line":71,"column":12,"nodeType":"124","messageId":"125","endLine":71,"endColumn":21},{"ruleId":"137","severity":1,"message":"138","line":87,"column":33,"nodeType":"139","messageId":"140","endLine":87,"endColumn":35},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formatCurrency'. Either include it or remove the dependency array.","ArrayExpression",["155"],["153"],["154"],"React Hook useEffect has a missing dependency: 'loadPricelist'. Either include it or remove the dependency array.",["156"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useSWR' is defined but never used.","'getDateOrders' is defined but never used.","'all' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["157"],"'format' is defined but never used.","'moment' is defined but never used.","'MUIDataTable' is defined but never used.","'_' is defined but never used.","'getPricelist' is defined but never used.","'columns' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'formatCurrency' and 'id'. Either include them or remove the dependency array.",["158"],"'test' is assigned a value but never used.","'data' is assigned a value but never used.","'error' is assigned a value but never used.","react-hooks/rules-of-hooks","React Hook \"useSWR\" is called in function \"yeet\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","'getDateRange' is defined but never used.","'rangeSales' is defined but never used.","'fetcher' is assigned a value but never used.","'Bar' is defined but never used.","'salesdata' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [formatCurrency]",{"range":"167","text":"168"},"Update the dependencies array to be: [loadPricelist]",{"range":"169","text":"170"},"Update the dependencies array to be: [id]",{"range":"171","text":"172"},"Update the dependencies array to be: [formatCurrency, id]",{"range":"173","text":"174"},[4532,4534],"[formatCurrency]",[2943,2945],"[loadPricelist]",[2203,2205],"[id]",[5493,5495],"[formatCurrency, id]"]